@using MusicTheory;
@using MusicTheory.Instruments;

<div id="fretboard">
    <div id="empty"></div>
    @for (int i = 0; i < 25; i++)
    {
        <div id="fret">@i</div>
    }

    @foreach (var str in Guitar.Strings)
    {
        <div id="string">@str.StringNumber</div>

        @foreach (var note in str.Notes)
        {
            <div id="note" class="@HighlightScale(note)">@note</div>
        }
    }
</div>
<select @bind="@ScaleKey">
    @foreach (var item in AllKeys)
    {
        <option value="@item">@item</option>
    }
</select>


@code {
    public Guitar Guitar;
    public Scale Scale;

    private Keys _scaleKey = Keys.C;
    public Keys ScaleKey
    {
        get { return _scaleKey; }
        set { _scaleKey = value; Scale = new Scale(_scaleKey, "Major"); }
    }

    public IEnumerable<Keys> AllKeys;


    public string HighlightScale(Note note) => Scale.HasNote(note) ? "scaleHighlight" : null;

    protected override void OnInitialized()
    {
        Guitar = new MusicTheory.Instruments.Guitar();
        Scale = new Scale(_scaleKey, "Major");
        AllKeys =  Enum.GetValues(typeof(Keys)).Cast<Keys>();
    }
}