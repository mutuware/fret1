@using MusicTheory;
@using MusicTheory.Instruments;

<div id="fretboard">
    <div id="empty"></div>
    @for (int i = 0; i < 25; i++)
    {
        <div id="fret">@i</div>
    }

    @foreach (var str in Guitar.Strings)
    {
        <div id="string">@str.StringNumber</div>

        @foreach (var note in str.Notes)
        {
            <div id="note" class="@HighlightScale(note) @HighlightChord(note)">@note</div>
        }
    }
</div>


<div id="options">
    <label for="scaleKey" class="label">Scale</label>
    <select id="scaleKey" @bind="@ScaleKey">
        @foreach (var scaleKey in ScaleKeys)
        {
            <option value="@scaleKey">@scaleKey</option>
        }
    </select>

    <select id="scaleType" @bind="@ScaleType">
        @foreach (var scaleType in ScaleTypes)
        {
            <option value="@scaleType">@scaleType</option>
        }
    </select>

    <!-- notes -->
    <ul class="itemNotes">
        @foreach (var note in Scale.Notes)
        {
            <li>@note.Key</li>
        }
    </ul>



    <label for="chordKey" class="label">Chord</label>
    <select id="chordKey" @bind="@ChordKey">
        @foreach (var scaleKey in ScaleKeys)
        {
            <option value="@scaleKey">@scaleKey</option>
        }
    </select>

    <select id="chordType" @bind="@ChordType">
        @foreach (var chordType in ChordTypes)
        {
            <option value="@chordType">@chordType</option>
        }
    </select>

    <!-- notes -->
    <ul class="itemNotes">
        @foreach (var note in Chord.Notes)
        {
            <li>@note.Key</li>
        }
    </ul>
</div>


@code {
    public Guitar Guitar;

    public Scale Scale;

    private Keys _scaleKey = Keys.C;
    public Keys ScaleKey
    {
        get { return _scaleKey; }
        set { _scaleKey = value; Scale = new Scale(_scaleKey, _scaleType); }
    }

    private string _scaleType = "Major";
    public string ScaleType
    {
        get { return _scaleType; }
        set { _scaleType = value; Scale = new Scale(_scaleKey, _scaleType); }
    }

    public IEnumerable<Keys> ScaleKeys;
    public IEnumerable<string> ScaleTypes;

    public Chord Chord;
    private Keys _chordKey = Keys.C;
    public Keys ChordKey
    {
        get { return _chordKey; }
        set { _chordKey = value; Chord = new Chord(_chordKey, _chordType); }
    }

    private string _chordType = "Major";
    public string ChordType
    {
        get { return _chordType; }
        set { _chordType = value; Chord = new Chord(_chordKey, _chordType); }
    }

    public IEnumerable<Keys> ChordKeys;
    public IEnumerable<string> ChordTypes;


    public string HighlightScale(Note note) => Scale.HasNote(note) ? "scaleHighlight" : null;
    public string HighlightChord(Note note) => Chord.HasNote(note) ? "chordHighlight" : null;

    protected override void OnInitialized()
    {
        Guitar = new MusicTheory.Instruments.Guitar();

        var allKeys = Enum.GetValues(typeof(Keys)).Cast<Keys>();
        ScaleKeys = allKeys;
        ScaleTypes = new string[] { "Major", "Minor" };

        ChordKeys = allKeys;
        ChordTypes = new string[] { "Major", "Minor" };

        Scale = new Scale(_scaleKey, "Major");

        Chord = new Chord(_chordKey, "Major");

    }
}